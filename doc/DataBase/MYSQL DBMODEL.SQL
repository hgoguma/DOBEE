-- MEMBER
ALTER TABLE `MEMBER`
	DROP FOREIGN KEY `FK_AUTHORITY_TO_MEMBER`; -- AUTHORITY -> MEMBER

-- MEMBER
ALTER TABLE `MEMBER`
	DROP FOREIGN KEY `FK_TEAMLIST_TO_MEMBER`; -- TEAMLIST -> MEMBER

-- TASK
ALTER TABLE `TASK`
	DROP FOREIGN KEY `FK_PROJECTMEMBER_TO_TASK`; -- PROJECTMEMBER -> TASK

-- TASKDETAIL
ALTER TABLE `TASKDETAIL`
	DROP FOREIGN KEY `FK_TASK_TO_TASKDETAIL`; -- TASK -> TASKDETAIL

-- CHECKLIST
ALTER TABLE `CHECKLIST`
	DROP FOREIGN KEY `FK_TASK_TO_CHECKLIST`; -- TASK -> CHECKLIST

-- PROJSCHEDULE
ALTER TABLE `PROJSCHEDULE`
	DROP FOREIGN KEY `FK_PROJECT_TO_PROJSCHEDULE`; -- PROJECT -> PROJSCHEDULE

-- PROJSCHEDULE
ALTER TABLE `PROJSCHEDULE`
	DROP FOREIGN KEY `FK_SCHEDULE_TO_PROJSCHEDULE`; -- SCHEDULE -> PROJSCHEDULE

-- ATTAND
ALTER TABLE `ATTEND`
	DROP FOREIGN KEY `FK_ATTENDCODE_TO_ATTEND`; -- ATTANDCODE -> ATTAND

-- ATTAND
ALTER TABLE `ATTEND`
	DROP FOREIGN KEY `FK_MEMBER_TO_ATTEND`; -- MEMBER -> ATTAND

-- COSTLIST
ALTER TABLE `COSTLIST`
	DROP FOREIGN KEY `FK_COSTCODE_TO_COSTLIST`; -- COSTCODE -> COSTLIST

-- COSTLIST
ALTER TABLE `COSTLIST`
	DROP FOREIGN KEY `FK_DEBIT_TO_COSTLIST`; -- DEBIT -> COSTLIST

-- COSTLIST
ALTER TABLE `COSTLIST`
	DROP FOREIGN KEY `FK_MEMBER_TO_COSTLIST`; -- MEMBER -> COSTLIST

-- NOTSHEDULE
ALTER TABLE `NOTSCHEDULE`
	DROP FOREIGN KEY `FK_SCHEDULE_TO_NOTSCHEDULE`; -- SCHEDULE -> NOTSHEDULE

-- NOTSHEDULE
ALTER TABLE `NOTSCHEDULE`
	DROP FOREIGN KEY `FK_NOTICE_TO_NOTSCHEDULE`; -- NOTICE -> NOTSHEDULE

-- NOTICEFILE
ALTER TABLE `NOTICEFILE`
	DROP FOREIGN KEY `FK_NOTICE_TO_NOTICEFILE`; -- NOTICE -> NOTICEFILE

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	DROP FOREIGN KEY `FK_PROJECT_TO_TASKSCHEDULE`; -- PROJECT -> TASKSCHEDULE

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	DROP FOREIGN KEY `FK_SCHEDULE_TO_TASKSCHEDULE`; -- SCHEDULE -> TASKSCHEDULE

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	DROP FOREIGN KEY `FK_TASK_TO_TASKSCHEDULE`; -- TASK -> TASKSCHEDULE

-- APPLY
ALTER TABLE `APPLY`
	DROP FOREIGN KEY `FK_APPLYLIST_TO_APPLY`; -- APPLYLIST -> APPLY

-- APPLY
ALTER TABLE `APPLY`
	DROP FOREIGN KEY `FK_MEMBER_TO_APPLY`; -- MEMBER -> APPLY

-- APPLY
ALTER TABLE `APPLY`
	DROP FOREIGN KEY `FK_MEMBER_TO_APPLY2`; -- MEMBER -> APPLY2

-- CORPSCHEDULE
ALTER TABLE `CORPSCHEDULE`
	DROP FOREIGN KEY `FK_SCHEDULE_TO_CORPSCHEDULE`; -- SCHEDULE -> CORPSCHEDULE

-- PROJECTMEMBER
ALTER TABLE `PROJECTMEMBER`
	DROP FOREIGN KEY `FK_MEMBER_TO_PROJECTMEMBER`; -- MEMBER -> PROJECTMEMBER

-- PROJECTMEMBER
ALTER TABLE `PROJECTMEMBER`
	DROP FOREIGN KEY `FK_PROJECT_TO_PROJECTMEMBER`; -- PROJECT -> PROJECTMEMBER

-- BREAK
ALTER TABLE `BREAK`
	DROP FOREIGN KEY `FK_MEMBER_TO_BREAK`; -- MEMBER -> BREAK

-- BREAKLIST
ALTER TABLE `BREAKLIST`
	DROP FOREIGN KEY `FK_APPLY_TO_BREAKLIST`; -- APPLY -> BREAKLIST

-- BREAKLIST
ALTER TABLE `BREAKLIST`
	DROP FOREIGN KEY `FK_BREAK_TO_BREAKLIST`; -- BREAK -> BREAKLIST

-- MEMBERINFO
ALTER TABLE `MEMBERINFO`
	DROP FOREIGN KEY `FK_MEMBER_TO_MEMBERINFO`; -- MEMBER -> MEMBERINFO

-- MEMBER
ALTER TABLE `MEMBER`
	DROP PRIMARY KEY; -- MEMBER 기본키

-- NOTICE
ALTER TABLE `NOTICE`
	DROP PRIMARY KEY; -- NOTICE 기본키

-- PROJECT
ALTER TABLE `PROJECT`
	DROP PRIMARY KEY; -- PROJECT 기본키

-- TASK
ALTER TABLE `TASK`
	DROP PRIMARY KEY; -- TASK 기본키

-- TASKDETAIL
ALTER TABLE `TASKDETAIL`
	DROP PRIMARY KEY; -- TASKDETAIL 기본키

-- DEBIT
ALTER TABLE `DEBIT`
	DROP PRIMARY KEY; -- DEBIT 기본키

-- CHECKLIST
ALTER TABLE `CHECKLIST`
	DROP PRIMARY KEY; -- CHECKLIST 기본키

-- PROJSCHEDULE
ALTER TABLE `PROJSCHEDULE`
	DROP PRIMARY KEY; -- PROJSCHEDULE 기본키

-- ATTAND
ALTER TABLE `ATTEND`
	DROP PRIMARY KEY; -- ATTAND 기본키

-- ATTANDCODE
ALTER TABLE `ATTENDCODE`
	DROP PRIMARY KEY; -- ATTANDCODE 기본키

-- COSTLIST
ALTER TABLE `COSTLIST`
	DROP PRIMARY KEY; -- COSTLIST 기본키

-- COSTCODE
ALTER TABLE `COSTCODE`
	DROP PRIMARY KEY; -- COSTCODE 기본키

-- SCHEDULE
ALTER TABLE `SCHEDULE`
	DROP PRIMARY KEY; -- SCHEDULE 기본키

-- NOTSHEDULE
ALTER TABLE `NOTSCHEDULE`
	DROP PRIMARY KEY; -- NOTSHEDULE 기본키

-- NOTICEFILE
ALTER TABLE `NOTICEFILE`
	DROP PRIMARY KEY; -- NOTICEFILE 기본키

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	DROP PRIMARY KEY; -- TASKSCHEDULE 기본키

-- APPLYLIST
ALTER TABLE `APPLYLIST`
	DROP PRIMARY KEY; -- APPLYLIST 기본키

-- APPLY
ALTER TABLE `APPLY`
	DROP PRIMARY KEY; -- APPLY 기본키

-- CORPSCHEDULE
ALTER TABLE `CORPSCHEDULE`
	DROP PRIMARY KEY; -- CORPSCHEDULE 기본키

-- AUTHORITY
ALTER TABLE `AUTHORITY`
	DROP PRIMARY KEY; -- AUTHORITY 기본키

-- TEAMLIST
ALTER TABLE `TEAMLIST`
	DROP PRIMARY KEY; -- TEAMLIST 기본키

-- PROJECTMEMBER
ALTER TABLE `PROJECTMEMBER`
	DROP PRIMARY KEY; -- PROJECTMEMBER 기본키

-- BREAK
ALTER TABLE `BREAK`
	DROP PRIMARY KEY; -- BREAK 기본키

-- BREAKLIST
ALTER TABLE `BREAKLIST`
	DROP PRIMARY KEY; -- BREAKLIST 기본키

-- MEMBERINFO
ALTER TABLE `MEMBERINFO`
	DROP PRIMARY KEY; -- MEMBERINFO 기본키

-- MEMBER
DROP TABLE IF EXISTS `MEMBER` RESTRICT;

-- NOTICE
DROP TABLE IF EXISTS `NOTICE` RESTRICT;

-- PROJECT
DROP TABLE IF EXISTS `PROJECT` RESTRICT;

-- TASK
DROP TABLE IF EXISTS `TASK` RESTRICT;

-- TASKDETAIL
DROP TABLE IF EXISTS `TASKDETAIL` RESTRICT;

-- DEBIT
DROP TABLE IF EXISTS `DEBIT` RESTRICT;

-- CHECKLIST
DROP TABLE IF EXISTS `CHECKLIST` RESTRICT;

-- PROJSCHEDULE
DROP TABLE IF EXISTS `PROJSCHEDULE` RESTRICT;

-- ATTAND
DROP TABLE IF EXISTS `ATTEND` RESTRICT;

-- ATTANDCODE
DROP TABLE IF EXISTS `ATTENDCODE` RESTRICT;

-- COSTLIST
DROP TABLE IF EXISTS `COSTLIST` RESTRICT;

-- COSTCODE
DROP TABLE IF EXISTS `COSTCODE` RESTRICT;

-- SCHEDULE
DROP TABLE IF EXISTS `SCHEDULE` RESTRICT;

-- NOTSHEDULE
DROP TABLE IF EXISTS `NOTSCHEDULE` RESTRICT;

-- NOTICEFILE
DROP TABLE IF EXISTS `NOTICEFILE` RESTRICT;

-- TASKSCHEDULE
DROP TABLE IF EXISTS `TASKSCHEDULE` RESTRICT;

-- APPLYLIST
DROP TABLE IF EXISTS `APPLYLIST` RESTRICT;

-- APPLY
DROP TABLE IF EXISTS `APPLY` RESTRICT;

-- CORPSCHEDULE
DROP TABLE IF EXISTS `CORPSCHEDULE` RESTRICT;

-- AUTHORITY
DROP TABLE IF EXISTS `AUTHORITY` RESTRICT;

-- TEAMLIST
DROP TABLE IF EXISTS `TEAMLIST` RESTRICT;

-- PROJECTMEMBER
DROP TABLE IF EXISTS `PROJECTMEMBER` RESTRICT;

-- BREAK
DROP TABLE IF EXISTS `BREAK` RESTRICT;

-- BREAKLIST
DROP TABLE IF EXISTS `BREAKLIST` RESTRICT;

-- MEMBERINFO
DROP TABLE IF EXISTS `MEMBERINFO` RESTRICT;

-- MEMBER
CREATE TABLE `MEMBER` (
	`MAIL`     VARCHAR(60)  NOT NULL COMMENT '사원메일', -- 사원메일
	`PWD`      VARCHAR(100) NULL     COMMENT '비밀번호', -- 비밀번호
	`NAME`     VARCHAR(20)  NOT NULL COMMENT '사원이름', -- 사원이름
	`MYPIC`    VARCHAR(255) NOT NULL COMMENT '사원사진', -- 사원사진
	`AUTHCODE` INT          NOT NULL COMMENT '권한코드', -- 권한코드
	`TCODE`    INT          NOT NULL COMMENT '팀코드' -- 팀코드
)
COMMENT 'MEMBER';

-- MEMBER
ALTER TABLE `MEMBER`
	ADD CONSTRAINT `PK_MEMBER` -- MEMBER 기본키
		PRIMARY KEY (
			`MAIL` -- 사원메일
		);

-- NOTICE
CREATE TABLE `NOTICE` (
	`SEQ`     INT          NOT NULL COMMENT '글번호', -- 글번호
	`TITLE`   VARCHAR(255) NOT NULL COMMENT '글제목', -- 글제목
	`CONTENT` BLOB         NOT NULL COMMENT '글내용', -- 글내용
	`REGDATE` DATETIME     NOT NULL COMMENT '작성시간', -- 작성시간
	`COUNT`   INT          NOT NULL COMMENT '조회수' -- 조회수
)
COMMENT 'NOTICE';

-- NOTICE
ALTER TABLE `NOTICE`
	ADD CONSTRAINT `PK_NOTICE` -- NOTICE 기본키
		PRIMARY KEY (
			`SEQ` -- 글번호
		);

-- PROJECT
CREATE TABLE `PROJECT` (
	`PSEQ`      INT         NOT NULL COMMENT '프로젝트번호', -- 프로젝트번호
	`PNAME`     VARCHAR(60) NOT NULL COMMENT '이름', -- 이름
	`PSTARTAT`  DATE        NOT NULL COMMENT '시작일', -- 시작일
	`PENDAT`    DATE        NOT NULL COMMENT '종료일', -- 종료일
	`PPROGRESS` VARCHAR(30) NOT NULL COMMENT '진행상황' -- 진행상황
)
COMMENT 'PROJECT';

-- PROJECT
ALTER TABLE `PROJECT`
	ADD CONSTRAINT `PK_PROJECT` -- PROJECT 기본키
		PRIMARY KEY (
			`PSEQ` -- 프로젝트번호
		);

-- TASK
CREATE TABLE `TASK` (
	`SEQ`      INT          NOT NULL COMMENT '업무번호', -- 업무번호
	`TITLE`    VARCHAR(100) NOT NULL COMMENT '업무 제목', -- 업무 제목
	`PROGRESS` VARCHAR(30)  NOT NULL COMMENT '진행상황', -- 진행상황
	`IMPORT`   INT          NOT NULL COMMENT '중요도', -- 중요도
	`STARTAT`  DATE         NOT NULL COMMENT '시작일', -- 시작일
	`ENDAT`    DATE         NOT NULL COMMENT '완료일', -- 완료일
	`MAIL`     VARCHAR(60)  NOT NULL COMMENT '사원메일', -- 사원메일
	`PSEQ`     INT          NOT NULL COMMENT '프로젝트번호' -- 프로젝트번호
)
COMMENT 'TASK';

-- TASK
ALTER TABLE `TASK`
	ADD CONSTRAINT `PK_TASK` -- TASK 기본키
		PRIMARY KEY (
			`SEQ` -- 업무번호
		);

-- TASKDETAIL
CREATE TABLE `TASKDETAIL` (
	`TDSEQ`     INT          NOT NULL COMMENT '상세업무번호', -- 상세업무번호
	`TDCONTENT` VARCHAR(100) NOT NULL COMMENT '상세업무내용', -- 상세업무내용
	`SEQ`       INT          NOT NULL COMMENT '업무번호' -- 업무번호
)
COMMENT 'TASKDETAIL';

-- TASKDETAIL
ALTER TABLE `TASKDETAIL`
	ADD CONSTRAINT `PK_TASKDETAIL` -- TASKDETAIL 기본키
		PRIMARY KEY (
			`TDSEQ` -- 상세업무번호
		);

-- DEBIT
CREATE TABLE `DEBIT` (
	`CARDNUM`  INT         NOT NULL COMMENT '카드번호', -- 카드번호
	`CORP`     VARCHAR(60) NOT NULL COMMENT '카드사', -- 카드사
	`NAME`     VARCHAR(60) NOT NULL COMMENT '명의자이름', -- 명의자이름
	`NICKNAME` VARCHAR(60) NULL     COMMENT '카드별칭', -- 카드별칭
	`ENTRY`    VARCHAR(60) NOT NULL COMMENT '카드구분', -- 카드구분
	`VALDATE`  DATE        NOT NULL COMMENT '유효기간' -- 유효기간
)
COMMENT 'DEBIT';

-- DEBIT
ALTER TABLE `DEBIT`
	ADD CONSTRAINT `PK_DEBIT` -- DEBIT 기본키
		PRIMARY KEY (
			`CARDNUM` -- 카드번호
		);

-- CHECKLIST
CREATE TABLE `CHECKLIST` (
	`CHKSEQ`  INT          NOT NULL COMMENT '체크리스트번호', -- 체크리스트번호
	`CONTENT` VARCHAR(100) NOT NULL COMMENT '항목', -- 항목
	`ISCHECK` BOOLEAN      NOT NULL COMMENT '체크여부', -- 체크여부
	`SEQ`     INT          NOT NULL COMMENT '업무번호' -- 업무번호
)
COMMENT 'CHECKLIST';

-- CHECKLIST
ALTER TABLE `CHECKLIST`
	ADD CONSTRAINT `PK_CHECKLIST` -- CHECKLIST 기본키
		PRIMARY KEY (
			`CHKSEQ` -- 체크리스트번호
		);

-- PROJSCHEDULE
CREATE TABLE `PROJSCHEDULE` (
	`PSSEQ` INT NOT NULL COMMENT '프로젝트일정번호', -- 프로젝트일정번호
	`PSEQ`  INT NOT NULL COMMENT '프로젝트번호', -- 프로젝트번호
	`SSEQ`  INT NOT NULL COMMENT '일정번호' -- 일정번호
)
COMMENT 'PROJSCHEDULE';

-- PROJSCHEDULE
ALTER TABLE `PROJSCHEDULE`
	ADD CONSTRAINT `PK_PROJSCHEDULE` -- PROJSCHEDULE 기본키
		PRIMARY KEY (
			`PSSEQ` -- 프로젝트일정번호
		);

-- ATTAND
CREATE TABLE `ATTEND` (
	`SEQ`     INT         NOT NULL COMMENT '근태목록번호', -- 근태목록번호
	`ATTTIME` DATE        NOT NULL COMMENT '출퇴근시간', -- 출퇴근시간
	`MAIL`    VARCHAR(60) NOT NULL COMMENT '사원메일', -- 사원메일
	`ATTSEQ`  INT         NOT NULL COMMENT '근태코드' -- 근태코드
)
COMMENT 'ATTAND';

-- ATTAND
ALTER TABLE `ATTEND`
	ADD CONSTRAINT `PK_ATTEND` -- ATTAND 기본키
		PRIMARY KEY (
			`SEQ` -- 근태목록번호
		);

-- ATTANDCODE
CREATE TABLE `ATTENDCODE` (
	`ATTSEQ` INT         NOT NULL COMMENT '근태코드', -- 근태코드
	`ATTDIV` VARCHAR(60) NOT NULL COMMENT '근태구분' -- 근태구분
)
COMMENT 'ATTANDCODE';

-- ATTANDCODE
ALTER TABLE `ATTENDCODE`
	ADD CONSTRAINT `PK_ATTENDCODE` -- ATTANDCODE 기본키
		PRIMARY KEY (
			`ATTSEQ` -- 근태코드
		);

-- COSTLIST
CREATE TABLE `COSTLIST` (
	`SEQ`     INT          NOT NULL COMMENT '비용처리번호', -- 비용처리번호
	`REGDATE` DATE         NOT NULL COMMENT '작성일', -- 작성일
	`USEDATE` DATETIME     NULL     COMMENT '사용일', -- 사용일
	`USEAT`   VARCHAR(60)  NOT NULL COMMENT '사용처', -- 사용처
	`COST`    INT          NOT NULL COMMENT '사용금액', -- 사용금액
	`DETAIL`  VARCHAR(100) NULL     COMMENT '상세내용', -- 상세내용
	`CODE`    INT          NOT NULL COMMENT '비용처리코드', -- 비용처리코드
	`CARDNUM` INT          NOT NULL COMMENT '카드번호', -- 카드번호
	`MAIL`    VARCHAR(60)  NOT NULL COMMENT '사원메일' -- 사원메일
)
COMMENT 'COSTLIST';

-- COSTLIST
ALTER TABLE `COSTLIST`
	ADD CONSTRAINT `PK_COSTLIST` -- COSTLIST 기본키
		PRIMARY KEY (
			`SEQ` -- 비용처리번호
		);

-- COSTCODE
CREATE TABLE `COSTCODE` (
	`CODE`  INT         NOT NULL COMMENT '비용처리코드', -- 비용처리코드
	`ENTRY` VARCHAR(60) NOT NULL COMMENT '비용항목' -- 비용항목
)
COMMENT 'COSTCODE';

-- COSTCODE
ALTER TABLE `COSTCODE`
	ADD CONSTRAINT `PK_COSTCODE` -- COSTCODE 기본키
		PRIMARY KEY (
			`CODE` -- 비용처리코드
		);

-- SCHEDULE
CREATE TABLE `SCHEDULE` (
	`SSEQ`      INT      NOT NULL COMMENT '일정번호', -- 일정번호
	`STARTTIME` DATETIME NOT NULL COMMENT '시작시간', -- 시작시간
	`ENDTIME`   DATETIME NOT NULL COMMENT '종료시간' -- 종료시간
)
COMMENT 'SCHEDULE';

-- SCHEDULE
ALTER TABLE `SCHEDULE`
	ADD CONSTRAINT `PK_SCHEDULE` -- SCHEDULE 기본키
		PRIMARY KEY (
			`SSEQ` -- 일정번호
		);

-- NOTSHEDULE
CREATE TABLE `NOTSCHEDULE` (
	`NSSEQ`     INT         NOT NULL COMMENT '공지관련일정번호', -- 공지관련일정번호
	`NSCONTENT` VARCHAR(60) NOT NULL COMMENT '공지사항일정내용', -- 공지사항일정내용
	`SSEQ`      INT         NOT NULL COMMENT '일정번호', -- 일정번호
	`SEQ`       INT         NOT NULL COMMENT '글번호' -- 글번호
)
COMMENT 'NOTSHEDULE';

-- NOTSHEDULE
ALTER TABLE `NOTSCHEDULE`
	ADD CONSTRAINT `PK_NOTSCHEDULE` -- NOTSHEDULE 기본키
		PRIMARY KEY (
			`NSSEQ` -- 공지관련일정번호
		);

-- NOTICEFILE
CREATE TABLE `NOTICEFILE` (
	`NFSEQ`    INT          NOT NULL COMMENT '공지사항첨부파일번호', -- 공지사항첨부파일번호
	`ORGNAME`  VARCHAR(255) NOT NULL COMMENT '원본이름', -- 원본이름
	`SAVENAME` VARCHAR(255) NOT NULL COMMENT '저장이름', -- 저장이름
	`SEQ`      INT          NOT NULL COMMENT '글번호' -- 글번호
)
COMMENT 'NOTICEFILE';

-- NOTICEFILE
ALTER TABLE `NOTICEFILE`
	ADD CONSTRAINT `PK_NOTICEFILE` -- NOTICEFILE 기본키
		PRIMARY KEY (
			`NFSEQ` -- 공지사항첨부파일번호
		);

-- TASKSCHEDULE
CREATE TABLE `TASKSCHEDULE` (
	`TSSEQ` INT NOT NULL COMMENT '업무일정번호', -- 업무일정번호
	`PSEQ`  INT NOT NULL COMMENT '프로젝트번호', -- 프로젝트번호
	`SSEQ`  INT NOT NULL COMMENT '일정번호', -- 일정번호
	`SEQ`   INT NOT NULL COMMENT '업무번호' -- 업무번호
)
COMMENT 'TASKSCHEDULE';

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	ADD CONSTRAINT `PK_TASKSCHEDULE` -- TASKSCHEDULE 기본키
		PRIMARY KEY (
			`TSSEQ` -- 업무일정번호
		);

-- APPLYLIST
CREATE TABLE `APPLYLIST` (
	`ACODE` INT         NOT NULL COMMENT '신청항목코드', -- 신청항목코드
	`ENTRY` VARCHAR(60) NOT NULL COMMENT '항목' -- 항목
)
COMMENT 'APPLYLIST';

-- APPLYLIST
ALTER TABLE `APPLYLIST`
	ADD CONSTRAINT `PK_APPLYLIST` -- APPLYLIST 기본키
		PRIMARY KEY (
			`ACODE` -- 신청항목코드
		);

-- APPLY
CREATE TABLE `APPLY` (
	`ASEQ`      INT          NOT NULL COMMENT '신청번호', -- 신청번호
	`REQDATE`   DATE         NOT NULL COMMENT '신청일', -- 신청일
	`REASON`    VARCHAR(150) NOT NULL COMMENT '사유', -- 사유
	`STARTAT`   DATETIME     NOT NULL COMMENT '시작일', -- 시작일
	`ENDAT`     DATETIME     NOT NULL COMMENT '종료일', -- 종료일
	`ISAUTH`    VARCHAR(50)  NOT NULL COMMENT '승인여부', -- 승인여부
	`CONREASON` VARCHAR(150) NULL     COMMENT '반려사유', -- 반려사유
	`MAIL2`     VARCHAR(60)  NOT NULL COMMENT '신청자', -- 신청자
	`MAIL`      VARCHAR(60)  NOT NULL COMMENT '결재자', -- 결재자
	`ACODE`     INT          NOT NULL COMMENT '신청항목코드' -- 신청항목코드
)
COMMENT 'APPLY';

-- APPLY
ALTER TABLE `APPLY`
	ADD CONSTRAINT `PK_APPLY` -- APPLY 기본키
		PRIMARY KEY (
			`ASEQ` -- 신청번호
		);

-- CORPSCHEDULE
CREATE TABLE `CORPSCHEDULE` (
	`CSSEQ`     INT         NOT NULL COMMENT '회사일정번호', -- 회사일정번호
	`SCCONTENT` VARCHAR(60) NOT NULL COMMENT '회사일정내용', -- 회사일정내용
	`SSEQ`      INT         NOT NULL COMMENT '일정번호' -- 일정번호
)
COMMENT 'CORPSCHEDULE';

-- CORPSCHEDULE
ALTER TABLE `CORPSCHEDULE`
	ADD CONSTRAINT `PK_CORPSCHEDULE` -- CORPSCHEDULE 기본키
		PRIMARY KEY (
			`CSSEQ` -- 회사일정번호
		);

-- AUTHORITY
CREATE TABLE `AUTHORITY` (
	`AUTHCODE` INT         NOT NULL COMMENT '권한코드', -- 권한코드
	`AUTH`     VARCHAR(30) NOT NULL COMMENT '권한명' -- 권한명
)
COMMENT 'AUTHORITY';

-- AUTHORITY
ALTER TABLE `AUTHORITY`
	ADD CONSTRAINT `PK_AUTHORITY` -- AUTHORITY 기본키
		PRIMARY KEY (
			`AUTHCODE` -- 권한코드
		);

-- TEAMLIST
CREATE TABLE `TEAMLIST` (
	`TCODE` INT         NOT NULL COMMENT '팀코드', -- 팀코드
	`TNAME` VARCHAR(60) NOT NULL COMMENT '팀이름' -- 팀이름
)
COMMENT 'TEAMLIST';

-- TEAMLIST
ALTER TABLE `TEAMLIST`
	ADD CONSTRAINT `PK_TEAMLIST` -- TEAMLIST 기본키
		PRIMARY KEY (
			`TCODE` -- 팀코드
		);

-- PROJECTMEMBER
CREATE TABLE `PROJECTMEMBER` (
	`MAIL` VARCHAR(60) NOT NULL COMMENT '사원메일', -- 사원메일
	`PSEQ` INT         NOT NULL COMMENT '프로젝트번호' -- 프로젝트번호
)
COMMENT 'PROJECTMEMBER';

-- PROJECTMEMBER
ALTER TABLE `PROJECTMEMBER`
	ADD CONSTRAINT `PK_PROJECTMEMBER` -- PROJECTMEMBER 기본키
		PRIMARY KEY (
			`MAIL`, -- 사원메일
			`PSEQ`  -- 프로젝트번호
		);

-- BREAK
CREATE TABLE `BREAK` (
	`MAIL`       VARCHAR(60) NOT NULL COMMENT '사원메일', -- 사원메일
	`TOTALBREAK` INT         NOT NULL COMMENT '총연차', -- 총연차
	`USEDBREAK`  INT         NOT NULL COMMENT '사용연차일수' -- 사용연차일수
)
COMMENT 'BREAK';

-- BREAK
ALTER TABLE `BREAK`
	ADD CONSTRAINT `PK_BREAK` -- BREAK 기본키
		PRIMARY KEY (
			`MAIL` -- 사원메일
		);

-- BREAKLIST
CREATE TABLE `BREAKLIST` (
	`SEQ`        INT         NOT NULL COMMENT '연차사용목록시퀀스', -- 연차사용목록시퀀스
	`ASEQ`       INT         NOT NULL COMMENT '신청번호', -- 신청번호
	`MAIL`       VARCHAR(60) NOT NULL COMMENT '사원메일', -- 사원메일
	`USINGBREAK` INT         NOT NULL COMMENT '연차사용일수' -- 연차사용일수
)
COMMENT 'BREAKLIST';

-- BREAKLIST
ALTER TABLE `BREAKLIST`
	ADD CONSTRAINT `PK_BREAKLIST` -- BREAKLIST 기본키
		PRIMARY KEY (
			`SEQ` -- 연차사용목록시퀀스
		);

-- MEMBERINFO
CREATE TABLE `MEMBERINFO` (
	`MAIL`     VARCHAR(60) NOT NULL COMMENT '사원메일', -- 사원메일
	`REGDATE`  DATE        NOT NULL COMMENT '입사일', -- 입사일
	`SERVE`    VARCHAR(60) NOT NULL COMMENT '재직상태', -- 재직상태
	`EMP`      VARCHAR(60) NOT NULL COMMENT '고용형태', -- 고용형태
	`POSITION` VARCHAR(60) NOT NULL COMMENT '직책', -- 직책
	`PHONE`    VARCHAR(30) NULL     COMMENT '휴대폰번호' -- 휴대폰번호
)
COMMENT 'MEMBERINFO';

-- MEMBERINFO
ALTER TABLE `MEMBERINFO`
	ADD CONSTRAINT `PK_MEMBERINFO` -- MEMBERINFO 기본키
		PRIMARY KEY (
			`MAIL` -- 사원메일
		);

-- MEMBER
ALTER TABLE `MEMBER`
	ADD CONSTRAINT `FK_AUTHORITY_TO_MEMBER` -- AUTHORITY -> MEMBER
		FOREIGN KEY (
			`AUTHCODE` -- 권한코드
		)
		REFERENCES `AUTHORITY` ( -- AUTHORITY
			`AUTHCODE` -- 권한코드
		);

-- MEMBER
ALTER TABLE `MEMBER`
	ADD CONSTRAINT `FK_TEAMLIST_TO_MEMBER` -- TEAMLIST -> MEMBER
		FOREIGN KEY (
			`TCODE` -- 팀코드
		)
		REFERENCES `TEAMLIST` ( -- TEAMLIST
			`TCODE` -- 팀코드
		);

-- TASK
ALTER TABLE `TASK`
	ADD CONSTRAINT `FK_PROJECTMEMBER_TO_TASK` -- PROJECTMEMBER -> TASK
		FOREIGN KEY (
			`MAIL`, -- 사원메일
			`PSEQ`  -- 프로젝트번호
		)
		REFERENCES `PROJECTMEMBER` ( -- PROJECTMEMBER
			`MAIL`, -- 사원메일
			`PSEQ`  -- 프로젝트번호
		);

-- TASKDETAIL
ALTER TABLE `TASKDETAIL`
	ADD CONSTRAINT `FK_TASK_TO_TASKDETAIL` -- TASK -> TASKDETAIL
		FOREIGN KEY (
			`SEQ` -- 업무번호
		)
		REFERENCES `TASK` ( -- TASK
			`SEQ` -- 업무번호
		);

-- CHECKLIST
ALTER TABLE `CHECKLIST`
	ADD CONSTRAINT `FK_TASK_TO_CHECKLIST` -- TASK -> CHECKLIST
		FOREIGN KEY (
			`SEQ` -- 업무번호
		)
		REFERENCES `TASK` ( -- TASK
			`SEQ` -- 업무번호
		);

-- PROJSCHEDULE
ALTER TABLE `PROJSCHEDULE`
	ADD CONSTRAINT `FK_PROJECT_TO_PROJSCHEDULE` -- PROJECT -> PROJSCHEDULE
		FOREIGN KEY (
			`PSEQ` -- 프로젝트번호
		)
		REFERENCES `PROJECT` ( -- PROJECT
			`PSEQ` -- 프로젝트번호
		);

-- PROJSCHEDULE
ALTER TABLE `PROJSCHEDULE`
	ADD CONSTRAINT `FK_SCHEDULE_TO_PROJSCHEDULE` -- SCHEDULE -> PROJSCHEDULE
		FOREIGN KEY (
			`SSEQ` -- 일정번호
		)
		REFERENCES `SCHEDULE` ( -- SCHEDULE
			`SSEQ` -- 일정번호
		);

-- ATTAND
ALTER TABLE `ATTEND`
	ADD CONSTRAINT `FK_ATTENDCODE_TO_ATTEND` -- ATTANDCODE -> ATTAND
		FOREIGN KEY (
			`ATTSEQ` -- 근태코드
		)
		REFERENCES `ATTENDCODE` ( -- ATTANDCODE
			`ATTSEQ` -- 근태코드
		);

-- ATTAND
ALTER TABLE `ATTEND`
	ADD CONSTRAINT `FK_MEMBER_TO_ATTEND` -- MEMBER -> ATTAND
		FOREIGN KEY (
			`MAIL` -- 사원메일
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);

-- COSTLIST
ALTER TABLE `COSTLIST`
	ADD CONSTRAINT `FK_COSTCODE_TO_COSTLIST` -- COSTCODE -> COSTLIST
		FOREIGN KEY (
			`CODE` -- 비용처리코드
		)
		REFERENCES `COSTCODE` ( -- COSTCODE
			`CODE` -- 비용처리코드
		);

-- COSTLIST
ALTER TABLE `COSTLIST`
	ADD CONSTRAINT `FK_DEBIT_TO_COSTLIST` -- DEBIT -> COSTLIST
		FOREIGN KEY (
			`CARDNUM` -- 카드번호
		)
		REFERENCES `DEBIT` ( -- DEBIT
			`CARDNUM` -- 카드번호
		);

-- COSTLIST
ALTER TABLE `COSTLIST`
	ADD CONSTRAINT `FK_MEMBER_TO_COSTLIST` -- MEMBER -> COSTLIST
		FOREIGN KEY (
			`MAIL` -- 사원메일
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);

-- NOTSHEDULE
ALTER TABLE `NOTSCHEDULE`
	ADD CONSTRAINT `FK_SCHEDULE_TO_NOTSCHEDULE` -- SCHEDULE -> NOTSHEDULE
		FOREIGN KEY (
			`SSEQ` -- 일정번호
		)
		REFERENCES `SCHEDULE` ( -- SCHEDULE
			`SSEQ` -- 일정번호
		);

-- NOTSHEDULE
ALTER TABLE `NOTSCHEDULE`
	ADD CONSTRAINT `FK_NOTICE_TO_NOTSCHEDULE` -- NOTICE -> NOTSHEDULE
		FOREIGN KEY (
			`SEQ` -- 글번호
		)
		REFERENCES `NOTICE` ( -- NOTICE
			`SEQ` -- 글번호
		);

-- NOTICEFILE
ALTER TABLE `NOTICEFILE`
	ADD CONSTRAINT `FK_NOTICE_TO_NOTICEFILE` -- NOTICE -> NOTICEFILE
		FOREIGN KEY (
			`SEQ` -- 글번호
		)
		REFERENCES `NOTICE` ( -- NOTICE
			`SEQ` -- 글번호
		);

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	ADD CONSTRAINT `FK_PROJECT_TO_TASKSCHEDULE` -- PROJECT -> TASKSCHEDULE
		FOREIGN KEY (
			`PSEQ` -- 프로젝트번호
		)
		REFERENCES `PROJECT` ( -- PROJECT
			`PSEQ` -- 프로젝트번호
		);

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	ADD CONSTRAINT `FK_SCHEDULE_TO_TASKSCHEDULE` -- SCHEDULE -> TASKSCHEDULE
		FOREIGN KEY (
			`SSEQ` -- 일정번호
		)
		REFERENCES `SCHEDULE` ( -- SCHEDULE
			`SSEQ` -- 일정번호
		);

-- TASKSCHEDULE
ALTER TABLE `TASKSCHEDULE`
	ADD CONSTRAINT `FK_TASK_TO_TASKSCHEDULE` -- TASK -> TASKSCHEDULE
		FOREIGN KEY (
			`SEQ` -- 업무번호
		)
		REFERENCES `TASK` ( -- TASK
			`SEQ` -- 업무번호
		);

-- APPLY
ALTER TABLE `APPLY`
	ADD CONSTRAINT `FK_APPLYLIST_TO_APPLY` -- APPLYLIST -> APPLY
		FOREIGN KEY (
			`ACODE` -- 신청항목코드
		)
		REFERENCES `APPLYLIST` ( -- APPLYLIST
			`ACODE` -- 신청항목코드
		);

-- APPLY
ALTER TABLE `APPLY`
	ADD CONSTRAINT `FK_MEMBER_TO_APPLY` -- MEMBER -> APPLY
		FOREIGN KEY (
			`MAIL2` -- 신청자
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);

-- APPLY
ALTER TABLE `APPLY`
	ADD CONSTRAINT `FK_MEMBER_TO_APPLY2` -- MEMBER -> APPLY2
		FOREIGN KEY (
			`MAIL` -- 결재자
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);

-- CORPSCHEDULE
ALTER TABLE `CORPSCHEDULE`
	ADD CONSTRAINT `FK_SCHEDULE_TO_CORPSCHEDULE` -- SCHEDULE -> CORPSCHEDULE
		FOREIGN KEY (
			`SSEQ` -- 일정번호
		)
		REFERENCES `SCHEDULE` ( -- SCHEDULE
			`SSEQ` -- 일정번호
		);

-- PROJECTMEMBER
ALTER TABLE `PROJECTMEMBER`
	ADD CONSTRAINT `FK_MEMBER_TO_PROJECTMEMBER` -- MEMBER -> PROJECTMEMBER
		FOREIGN KEY (
			`MAIL` -- 사원메일
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);

-- PROJECTMEMBER
ALTER TABLE `PROJECTMEMBER`
	ADD CONSTRAINT `FK_PROJECT_TO_PROJECTMEMBER` -- PROJECT -> PROJECTMEMBER
		FOREIGN KEY (
			`PSEQ` -- 프로젝트번호
		)
		REFERENCES `PROJECT` ( -- PROJECT
			`PSEQ` -- 프로젝트번호
		);

-- BREAK
ALTER TABLE `BREAK`
	ADD CONSTRAINT `FK_MEMBER_TO_BREAK` -- MEMBER -> BREAK
		FOREIGN KEY (
			`MAIL` -- 사원메일
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);

-- BREAKLIST
ALTER TABLE `BREAKLIST`
	ADD CONSTRAINT `FK_APPLY_TO_BREAKLIST` -- APPLY -> BREAKLIST
		FOREIGN KEY (
			`ASEQ` -- 신청번호
		)
		REFERENCES `APPLY` ( -- APPLY
			`ASEQ` -- 신청번호
		);

-- BREAKLIST
ALTER TABLE `BREAKLIST`
	ADD CONSTRAINT `FK_BREAK_TO_BREAKLIST` -- BREAK -> BREAKLIST
		FOREIGN KEY (
			`MAIL` -- 사원메일
		)
		REFERENCES `BREAK` ( -- BREAK
			`MAIL` -- 사원메일
		);

-- MEMBERINFO
ALTER TABLE `MEMBERINFO`
	ADD CONSTRAINT `FK_MEMBER_TO_MEMBERINFO` -- MEMBER -> MEMBERINFO
		FOREIGN KEY (
			`MAIL` -- 사원메일
		)
		REFERENCES `MEMBER` ( -- MEMBER
			`MAIL` -- 사원메일
		);